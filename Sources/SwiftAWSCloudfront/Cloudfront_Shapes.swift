// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Cloudfront {

    public struct GetStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the streaming distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct TagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tags"), required: true, type: .structure)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(resource: String, tags: Tags) {
            self.resource = resource
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case tags = "Tags"
        }
    }

    public struct CloudFrontOriginAccessIdentitySummaryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentitySummary", required: false, type: .list)
        ]
        public let cloudFrontOriginAccessIdentitySummary: [CloudFrontOriginAccessIdentitySummary]?

        public init(cloudFrontOriginAccessIdentitySummary: [CloudFrontOriginAccessIdentitySummary]? = nil) {
            self.cloudFrontOriginAccessIdentitySummary = cloudFrontOriginAccessIdentitySummary
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentitySummary = "CloudFrontOriginAccessIdentitySummary"
        }
    }

    public struct Signer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsAccountNumber", required: false, type: .string), 
            AWSShapeMember(label: "KeyPairIds", required: false, type: .structure)
        ]
        /// An AWS account that is included in the TrustedSigners complex type for this RTMP distribution. Valid values include:    self, which is the AWS account used to create the distribution.   An AWS account number.  
        public let awsAccountNumber: String?
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber.
        public let keyPairIds: KeyPairIds?

        public init(awsAccountNumber: String? = nil, keyPairIds: KeyPairIds? = nil) {
            self.awsAccountNumber = awsAccountNumber
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountNumber = "AwsAccountNumber"
            case keyPairIds = "KeyPairIds"
        }
    }

    public struct CreateStreamingDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information. 
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct UpdateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct QueryStringCacheKeysList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .list)
        ]
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum ItemSelection: String, CustomStringConvertible, Codable {
        case none = "none"
        case whitelist = "whitelist"
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public struct InvalidationSummaryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidationSummary", required: false, type: .list)
        ]
        public let invalidationSummary: [InvalidationSummary]?

        public init(invalidationSummary: [InvalidationSummary]? = nil) {
            self.invalidationSummary = invalidationSummary
        }

        private enum CodingKeys: String, CodingKey {
            case invalidationSummary = "InvalidationSummary"
        }
    }

    public struct InvalidationBatch: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Paths", required: true, type: .structure)
        ]
        /// A value that you specify to uniquely identify an invalidation request. CloudFront uses the value to prevent you from accidentally resubmitting an identical request. Whenever you create a new invalidation request, you must specify a new value for CallerReference and change other values in the request as applicable. One way to ensure that the value of CallerReference is unique is to use a timestamp, for example, 20120301090000. If you make a second invalidation request with the same value for CallerReference, and if the rest of the request is the same, CloudFront doesn't create a new invalidation request. Instead, CloudFront returns information about the invalidation request that you previously created with the same CallerReference. If CallerReference is a value you already sent in a previous invalidation batch request but the content of any Path is different from the original request, CloudFront returns an InvalidationBatchAlreadyExists error.
        public let callerReference: String
        /// A complex type that contains information about the objects that you want to invalidate. For more information, see Specifying the Objects to Invalidate in the Amazon CloudFront Developer Guide. 
        public let paths: Paths

        public init(callerReference: String, paths: Paths) {
            self.callerReference = callerReference
            self.paths = paths
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case paths = "Paths"
        }
    }

    public struct TrustedSigners: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  Optional: A complex type that contains trusted signers for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: AwsAccountNumberList?
        /// Specifies whether you want to require viewers to use signed URLs to access the files specified by PathPattern and TargetOriginId.
        public let enabled: Bool
        /// The number of trusted signers for this cache behavior.
        public let quantity: Int32

        public init(items: AwsAccountNumberList? = nil, enabled: Bool, quantity: Int32) {
            self.items = items
            self.enabled = enabled
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case enabled = "Enabled"
            case quantity = "Quantity"
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityList", required: false, type: .structure)
        ]
        /// The CloudFrontOriginAccessIdentityList type. 
        public let cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList?

        public init(cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList? = nil) {
            self.cloudFrontOriginAccessIdentityList = cloudFrontOriginAccessIdentityList
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityList = "CloudFrontOriginAccessIdentityList"
        }
    }

    public struct Headers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A list that contains one Name element for each header that you want CloudFront to use for caching in this cache behavior. If Quantity is 0, omit Items.
        public let items: HeaderList?
        /// The number of different headers that you want CloudFront to base caching on for this cache behavior. You can configure each cache behavior in a web distribution to do one of the following:    Forward all headers to your origin: Specify 1 for Quantity and * for Name.  CloudFront doesn't cache the objects that are associated with this cache behavior. Instead, CloudFront sends every request to the origin.      Forward a whitelist of headers you specify: Specify the number of headers that you want CloudFront to base caching on. Then specify the header names in Name elements. CloudFront caches your objects based on the values in the specified headers.    Forward only the default headers: Specify 0 for Quantity and omit Items. In this configuration, CloudFront doesn't cache based on the values in the request headers.   Regardless of which option you choose, CloudFront forwards headers to your origin based on whether the origin is an S3 bucket or a custom origin. See the following documentation:    S3 bucket: See HTTP Request Headers That CloudFront Removes or Updates     Custom origin: See HTTP Request Headers and CloudFront Behavior   
        public let quantity: Int32

        public init(items: HeaderList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CreateStreamingDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfigWithTags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionConfigWithTags", location: .body(locationName: "StreamingDistributionConfigWithTags"), required: true, type: .structure)
        ]
        ///  The streaming distribution's configuration information. 
        public let streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags

        public init(streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags) {
            self.streamingDistributionConfigWithTags = streamingDistributionConfigWithTags
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfigWithTags = "StreamingDistributionConfigWithTags"
        }
    }

    public struct QueryStringCacheKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// (Optional) A list that contains the query string parameters that you want CloudFront to use as a basis for caching for this cache behavior. If Quantity is 0, you can omit Items. 
        public let items: QueryStringCacheKeysList?
        /// The number of whitelisted query string parameters for this cache behavior.
        public let quantity: Int32

        public init(items: QueryStringCacheKeysList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct LambdaFunctionAssociations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  Optional: A complex type that contains LambdaFunctionAssociation items for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: LambdaFunctionAssociationList?
        /// The number of Lambda function associations for this cache behavior.
        public let quantity: Int32

        public init(items: LambdaFunctionAssociationList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct GetStreamingDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct Paths: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains a list of the paths that you want to invalidate.
        public let items: PathList?
        /// The number of objects that you want to invalidate.
        public let quantity: Int32

        public init(items: PathList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct SslProtocolsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslProtocol", required: false, type: .list)
        ]
        public let sslProtocol: [SslProtocol]?

        public init(sslProtocol: [SslProtocol]? = nil) {
            self.sslProtocol = sslProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case sslProtocol = "SslProtocol"
        }
    }

    public struct DefaultCacheBehavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultTTL", required: false, type: .long), 
            AWSShapeMember(label: "TargetOriginId", required: true, type: .string), 
            AWSShapeMember(label: "ForwardedValues", required: true, type: .structure), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "Compress", required: false, type: .boolean), 
            AWSShapeMember(label: "SmoothStreaming", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxTTL", required: false, type: .long), 
            AWSShapeMember(label: "LambdaFunctionAssociations", required: false, type: .structure), 
            AWSShapeMember(label: "MinTTL", required: true, type: .long), 
            AWSShapeMember(label: "ViewerProtocolPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "AllowedMethods", required: false, type: .structure)
        ]
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        public let targetOriginId: String
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the Amazon Amazon CloudFront Developer Guide. If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        public let maxTTL: Int64?
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.    https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy
        public let allowedMethods: AllowedMethods?

        public init(defaultTTL: Int64? = nil, targetOriginId: String, forwardedValues: ForwardedValues, trustedSigners: TrustedSigners, compress: Bool? = nil, smoothStreaming: Bool? = nil, maxTTL: Int64? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, minTTL: Int64, viewerProtocolPolicy: ViewerProtocolPolicy, allowedMethods: AllowedMethods? = nil) {
            self.defaultTTL = defaultTTL
            self.targetOriginId = targetOriginId
            self.forwardedValues = forwardedValues
            self.trustedSigners = trustedSigners
            self.compress = compress
            self.smoothStreaming = smoothStreaming
            self.maxTTL = maxTTL
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.minTTL = minTTL
            self.viewerProtocolPolicy = viewerProtocolPolicy
            self.allowedMethods = allowedMethods
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTTL = "DefaultTTL"
            case targetOriginId = "TargetOriginId"
            case forwardedValues = "ForwardedValues"
            case trustedSigners = "TrustedSigners"
            case compress = "Compress"
            case smoothStreaming = "SmoothStreaming"
            case maxTTL = "MaxTTL"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case minTTL = "MinTTL"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
            case allowedMethods = "AllowedMethods"
        }
    }

    public struct PathList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .list)
        ]
        public let path: [String]?

        public init(path: [String]? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct Invalidation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidationBatch", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "CreateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The current invalidation information for the batch request. 
        public let invalidationBatch: InvalidationBatch
        /// The status of the invalidation request. When the invalidation batch is finished, the status is Completed.
        public let status: String
        /// The date and time the invalidation request was first made. 
        public let createTime: TimeStamp
        /// The identifier for the invalidation request. For example: IDFDVBD632BHDS5.
        public let id: String

        public init(invalidationBatch: InvalidationBatch, status: String, createTime: TimeStamp, id: String) {
            self.invalidationBatch = invalidationBatch
            self.status = status
            self.createTime = createTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case invalidationBatch = "InvalidationBatch"
            case status = "Status"
            case createTime = "CreateTime"
            case id = "Id"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        ///  A string that contains an optional Tag value. The string length should be between 0 and 256 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let value: String?
        ///  A string that contains Tag key. The string length should be between 1 and 128 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct CreateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfig", location: .body(locationName: "DistributionConfig"), required: true, type: .structure)
        ]
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(distributionConfig: DistributionConfig) {
            self.distributionConfig = distributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The identity's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public enum ViewerProtocolPolicy: String, CustomStringConvertible, Codable {
        case allowAll = "allow-all"
        case httpsOnly = "https-only"
        case redirectToHttps = "redirect-to-https"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", location: .body(locationName: "CloudFrontOriginAccessIdentityConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The identity's id.
        public let id: String
        /// The identity's configuration information.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig
        /// The value of the ETag header that you received when retrieving the identity's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig, ifMatch: String? = nil) {
            self.id = id
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case ifMatch = "If-Match"
        }
    }

    public struct GetInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Invalidation"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Invalidation", required: false, type: .structure)
        ]
        /// The invalidation's information. For more information, see Invalidation Complex Type. 
        public let invalidation: Invalidation?

        public init(invalidation: Invalidation? = nil) {
            self.invalidation = invalidation
        }

        private enum CodingKeys: String, CodingKey {
            case invalidation = "Invalidation"
        }
    }

    public struct CreateInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Invalidation"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "Invalidation", required: false, type: .structure)
        ]
        /// The fully qualified URI of the distribution and invalidation batch request, including the Invalidation ID.
        public let location: String?
        /// The invalidation's information.
        public let invalidation: Invalidation?

        public init(location: String? = nil, invalidation: Invalidation? = nil) {
            self.location = location
            self.invalidation = invalidation
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
            case invalidation = "Invalidation"
        }
    }

    public struct StreamingDistributionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Aliases", required: true, type: .structure), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "S3Origin", required: true, type: .structure), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "PriceClass", required: true, type: .enum)
        ]
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: TimeStamp
        ///  Indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated throughout the Amazon CloudFront system.
        public let status: String
        /// The identifier for the distribution, for example, EDFDVBD632BHDS5.
        public let id: String
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
        public let aliases: Aliases
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items.If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
        public let s3Origin: S3Origin
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// Whether the distribution is enabled to accept end user requests for content.
        public let enabled: Bool
        ///  The ARN (Amazon Resource Name) for the streaming distribution. For example: arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// The domain name corresponding to the distribution, for example, d111111abcdef8.cloudfront.net.
        public let domainName: String
        public let priceClass: PriceClass

        public init(lastModifiedTime: TimeStamp, status: String, id: String, aliases: Aliases, trustedSigners: TrustedSigners, s3Origin: S3Origin, comment: String, enabled: Bool, arn: String, domainName: String, priceClass: PriceClass) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.id = id
            self.aliases = aliases
            self.trustedSigners = trustedSigners
            self.s3Origin = s3Origin
            self.comment = comment
            self.enabled = enabled
            self.arn = arn
            self.domainName = domainName
            self.priceClass = priceClass
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case id = "Id"
            case aliases = "Aliases"
            case trustedSigners = "TrustedSigners"
            case s3Origin = "S3Origin"
            case comment = "Comment"
            case enabled = "Enabled"
            case arn = "ARN"
            case domainName = "DomainName"
            case priceClass = "PriceClass"
        }
    }

    public struct CacheBehavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetOriginId", required: true, type: .string), 
            AWSShapeMember(label: "PathPattern", required: true, type: .string), 
            AWSShapeMember(label: "AllowedMethods", required: false, type: .structure), 
            AWSShapeMember(label: "ForwardedValues", required: true, type: .structure), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "Compress", required: false, type: .boolean), 
            AWSShapeMember(label: "LambdaFunctionAssociations", required: false, type: .structure), 
            AWSShapeMember(label: "MaxTTL", required: false, type: .long), 
            AWSShapeMember(label: "SmoothStreaming", required: false, type: .boolean), 
            AWSShapeMember(label: "MinTTL", required: true, type: .long), 
            AWSShapeMember(label: "ViewerProtocolPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "DefaultTTL", required: false, type: .long)
        ]
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        public let targetOriginId: String
        /// The pattern (for example, images/*.jpg) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution.  You can optionally include a slash (/) at the beginning of the path pattern. For example, /images/*.jpg. CloudFront behavior is the same with or without the leading /.  The path pattern for the default cache behavior is * and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see Path Pattern in the  Amazon CloudFront Developer Guide.
        public let pathPattern: String
        public let allowedMethods: AllowedMethods?
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the Amazon Amazon CloudFront Developer Guide. If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.     https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).    For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?

        public init(targetOriginId: String, pathPattern: String, allowedMethods: AllowedMethods? = nil, forwardedValues: ForwardedValues, trustedSigners: TrustedSigners, compress: Bool? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, smoothStreaming: Bool? = nil, minTTL: Int64, viewerProtocolPolicy: ViewerProtocolPolicy, defaultTTL: Int64? = nil) {
            self.targetOriginId = targetOriginId
            self.pathPattern = pathPattern
            self.allowedMethods = allowedMethods
            self.forwardedValues = forwardedValues
            self.trustedSigners = trustedSigners
            self.compress = compress
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.smoothStreaming = smoothStreaming
            self.minTTL = minTTL
            self.viewerProtocolPolicy = viewerProtocolPolicy
            self.defaultTTL = defaultTTL
        }

        private enum CodingKeys: String, CodingKey {
            case targetOriginId = "TargetOriginId"
            case pathPattern = "PathPattern"
            case allowedMethods = "AllowedMethods"
            case forwardedValues = "ForwardedValues"
            case trustedSigners = "TrustedSigners"
            case compress = "Compress"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case maxTTL = "MaxTTL"
            case smoothStreaming = "SmoothStreaming"
            case minTTL = "MinTTL"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
            case defaultTTL = "DefaultTTL"
        }
    }

    public struct DistributionConfigWithTags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "DistributionConfig", required: true, type: .structure)
        ]
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags
        /// A distribution configuration.
        public let distributionConfig: DistributionConfig

        public init(tags: Tags, distributionConfig: DistributionConfig) {
            self.tags = tags
            self.distributionConfig = distributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case distributionConfig = "DistributionConfig"
        }
    }

    public struct ListStreamingDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionList", required: false, type: .structure)
        ]
        /// The StreamingDistributionList type. 
        public let streamingDistributionList: StreamingDistributionList?

        public init(streamingDistributionList: StreamingDistributionList? = nil) {
            self.streamingDistributionList = streamingDistributionList
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionList = "StreamingDistributionList"
        }
    }

    public struct Origins: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains origins for this distribution.
        public let items: OriginList?
        /// The number of origins for this distribution.
        public let quantity: Int32

        public init(items: OriginList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct GetDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "DistributionConfig", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig?

        public init(eTag: String? = nil, distributionConfig: DistributionConfig? = nil) {
            self.eTag = eTag
            self.distributionConfig = distributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case distributionConfig = "DistributionConfig"
        }
    }

    public struct InvalidationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// A flag that indicates whether more invalidation batch requests remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more invalidation batches in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value that you can use for the Marker request parameter to continue listing your invalidation batches where they left off.
        public let nextMarker: String?
        /// The value that you provided for the Marker request parameter.
        public let marker: String
        /// A complex type that contains one InvalidationSummary element for each invalidation batch created by the current AWS account.
        public let items: InvalidationSummaryList?
        /// The number of invalidation batches that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: InvalidationSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case isTruncated = "IsTruncated"
            case nextMarker = "NextMarker"
            case marker = "Marker"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct GetInvalidationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID.
        public let distributionId: String
        /// The identifier for the invalidation request, for example, IDFDVBD632BHDS5.
        public let id: String

        public init(distributionId: String, id: String) {
            self.distributionId = distributionId
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case distributionId = "DistributionId"
            case id = "Id"
        }
    }

    public struct ForwardedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryString", required: true, type: .boolean), 
            AWSShapeMember(label: "Headers", required: false, type: .structure), 
            AWSShapeMember(label: "Cookies", required: true, type: .structure), 
            AWSShapeMember(label: "QueryStringCacheKeys", required: false, type: .structure)
        ]
        /// Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of QueryString and on the values that you specify for QueryStringCacheKeys, if any: If you specify true for QueryString and you don't specify any values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for QueryString and you specify one or more values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for QueryString, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see Configuring CloudFront to Cache Based on Query String Parameters in the Amazon CloudFront Developer Guide.
        public let queryString: Bool
        /// A complex type that specifies the Headers, if any, that you want CloudFront to base caching on for this cache behavior. 
        public let headers: Headers?
        /// A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see How CloudFront Forwards, Caches, and Logs Cookies in the Amazon CloudFront Developer Guide.
        public let cookies: CookiePreference
        /// A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
        public let queryStringCacheKeys: QueryStringCacheKeys?

        public init(queryString: Bool, headers: Headers? = nil, cookies: CookiePreference, queryStringCacheKeys: QueryStringCacheKeys? = nil) {
            self.queryString = queryString
            self.headers = headers
            self.cookies = cookies
            self.queryStringCacheKeys = queryStringCacheKeys
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "QueryString"
            case headers = "Headers"
            case cookies = "Cookies"
            case queryStringCacheKeys = "QueryStringCacheKeys"
        }
    }

    public enum GeoRestrictionType: String, CustomStringConvertible, Codable {
        case blacklist = "blacklist"
        case whitelist = "whitelist"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public struct LocationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", required: false, type: .list)
        ]
        public let location: [String]?

        public init(location: [String]? = nil) {
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public struct SignerList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Signer", required: false, type: .list)
        ]
        public let signer: [Signer]?

        public init(signer: [Signer]? = nil) {
            self.signer = signer
        }

        private enum CodingKeys: String, CodingKey {
            case signer = "Signer"
        }
    }

    public struct UpdateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "DistributionConfig", location: .body(locationName: "DistributionConfig"), required: true, type: .structure)
        ]
        /// The distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(id: String, ifMatch: String? = nil, distributionConfig: DistributionConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.distributionConfig = distributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
            case distributionConfig = "DistributionConfig"
        }
    }

    public struct CacheBehaviorList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheBehavior", required: false, type: .list)
        ]
        public let cacheBehavior: [CacheBehavior]?

        public init(cacheBehavior: [CacheBehavior]? = nil) {
            self.cacheBehavior = cacheBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case cacheBehavior = "CacheBehavior"
        }
    }

    public struct LambdaFunctionAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventType", required: false, type: .enum), 
            AWSShapeMember(label: "LambdaFunctionARN", required: false, type: .string)
        ]
        /// Specifies the event type that triggers a Lambda function invocation. You can specify the following values:    viewer-request: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.     origin-request: The function executes only when CloudFront forwards a request to your origin. When the requested object is in the edge cache, the function doesn't execute.    origin-response: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute. If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.    viewer-response: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.  
        public let eventType: EventType?
        /// The ARN of the Lambda function. You must specify the ARN of a function version; you can't specify a Lambda alias or $LATEST.
        public let lambdaFunctionARN: String?

        public init(eventType: EventType? = nil, lambdaFunctionARN: String? = nil) {
            self.eventType = eventType
            self.lambdaFunctionARN = lambdaFunctionARN
        }

        private enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case lambdaFunctionARN = "LambdaFunctionARN"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String

        public init(resource: String) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct OriginCustomHeader: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HeaderName", required: true, type: .string), 
            AWSShapeMember(label: "HeaderValue", required: true, type: .string)
        ]
        /// The name of a header that you want CloudFront to forward to your origin. For more information, see Forwarding Custom Headers to Your Origin (Web Distributions Only) in the Amazon Amazon CloudFront Developer Guide.
        public let headerName: String
        /// The value for the header that you specified in the HeaderName field.
        public let headerValue: String

        public init(headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        private enum CodingKeys: String, CodingKey {
            case headerName = "HeaderName"
            case headerValue = "HeaderValue"
        }
    }

    public struct ListInvalidationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string), 
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string)
        ]
        /// Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set Marker to the value of the NextMarker from the current page's response. This value is the same as the ID of the last invalidation batch on that page. 
        public let marker: String?
        /// The maximum number of invalidation batches that you want in the response body.
        public let maxItems: String?
        /// The distribution's ID.
        public let distributionId: String

        public init(marker: String? = nil, maxItems: String? = nil, distributionId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.distributionId = distributionId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
            case distributionId = "DistributionId"
        }
    }

    public struct CacheBehaviors: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Optional: A complex type that contains cache behaviors for this distribution. If Quantity is 0, you can omit Items.
        public let items: CacheBehaviorList?
        /// The number of cache behaviors for this distribution. 
        public let quantity: Int32

        public init(items: CacheBehaviorList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum CertificateSource: String, CustomStringConvertible, Codable {
        case cloudfront = "cloudfront"
        case iam = "iam"
        case acm = "acm"
        public var description: String { return self.rawValue }
    }

    public struct CreateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure)
        ]
        /// The current version of the origin access identity created.
        public let eTag: String?
        /// The fully qualified URI of the new origin access identity just created. For example: https://cloudfront.amazonaws.com/2010-11-01/origin-access-identity/cloudfront/E74FTE3AJFJ256A.
        public let location: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, location: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.location = location
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
        }
    }

    public struct AllowedMethods: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "CachedMethods", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains the HTTP methods that you want CloudFront to process and forward to your origin.
        public let items: MethodsList
        public let cachedMethods: CachedMethods?
        /// The number of HTTP methods that you want CloudFront to forward to your origin. Valid values are 2 (for GET and HEAD requests), 3 (for GET, HEAD, and OPTIONS requests) and 7 (for GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests).
        public let quantity: Int32

        public init(items: MethodsList, cachedMethods: CachedMethods? = nil, quantity: Int32) {
            self.items = items
            self.cachedMethods = cachedMethods
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case cachedMethods = "CachedMethods"
            case quantity = "Quantity"
        }
    }

    public struct CreateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionConfig", location: .body(locationName: "StreamingDistributionConfig"), required: true, type: .structure)
        ]
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(streamingDistributionConfig: StreamingDistributionConfig) {
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct ListStreamingDistributionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// The value that you provided for the Marker request parameter.
        public let marker: String?
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListDistributionsByWebACLIdResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionList", required: false, type: .structure)
        ]
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        private enum CodingKeys: String, CodingKey {
            case distributionList = "DistributionList"
        }
    }

    public struct ListDistributionsByWebACLIdRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string), 
            AWSShapeMember(label: "WebACLId", location: .uri(locationName: "WebACLId"), required: true, type: .string)
        ]
        /// Use Marker and MaxItems to control pagination of results. If you have more than MaxItems distributions that satisfy the request, the response includes a NextMarker element. To get the next page of results, submit another request. For the value of Marker, specify the value of NextMarker from the last response. (For the first request, omit Marker.) 
        public let marker: String?
        /// The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
        public let maxItems: String?
        /// The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify "null" for the ID, the request returns a list of the distributions that aren't associated with a web ACL. 
        public let webACLId: String

        public init(marker: String? = nil, maxItems: String? = nil, webACLId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
            case webACLId = "WebACLId"
        }
    }

    public struct S3OriginConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginAccessIdentity", required: true, type: .string)
        ]
        /// The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can only access objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/cloudfront/ID-of-origin-access-identity  where  ID-of-origin-access-identity  is the value that CloudFront returned in the ID element when you created the origin access identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information about the origin access identity, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(originAccessIdentity: String) {
            self.originAccessIdentity = originAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case originAccessIdentity = "OriginAccessIdentity"
        }
    }

    public struct CookiePreference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Forward", required: true, type: .enum), 
            AWSShapeMember(label: "WhitelistedNames", required: false, type: .structure)
        ]
        /// Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the WhitelistedNames complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the Forward element. 
        public let forward: ItemSelection
        /// Required if you specify whitelist for the value of Forward:. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies. If you specify all or none for the value of Forward, omit WhitelistedNames. If you change the value of Forward from whitelist to all or none and you don't delete the WhitelistedNames element and its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each cache behavior, see Amazon CloudFront Limits in the AWS General Reference.
        public let whitelistedNames: CookieNames?

        public init(forward: ItemSelection, whitelistedNames: CookieNames? = nil) {
            self.forward = forward
            self.whitelistedNames = whitelistedNames
        }

        private enum CodingKeys: String, CodingKey {
            case forward = "Forward"
            case whitelistedNames = "WhitelistedNames"
        }
    }

    public struct OriginSslProtocols: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A list that contains allowed SSL/TLS protocols for this distribution.
        public let items: SslProtocolsList
        /// The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin. 
        public let quantity: Int32

        public init(items: SslProtocolsList, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum MinimumProtocolVersion: String, CustomStringConvertible, Codable {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        case tlsv12016 = "TLSv1_2016"
        case tlsv112016 = "TLSv1.1_2016"
        case tlsv122018 = "TLSv1.2_2018"
        public var description: String { return self.rawValue }
    }

    public struct CreateDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfigWithTags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfigWithTags", location: .body(locationName: "DistributionConfigWithTags"), required: true, type: .structure)
        ]
        /// The distribution's configuration information. 
        public let distributionConfigWithTags: DistributionConfigWithTags

        public init(distributionConfigWithTags: DistributionConfigWithTags) {
            self.distributionConfigWithTags = distributionConfigWithTags
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfigWithTags = "DistributionConfigWithTags"
        }
    }

    public struct CreateDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "Distribution", required: false, type: .structure)
        ]
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5. 
        public let location: String?
        /// The distribution's information. 
        public let distribution: Distribution?

        public init(eTag: String? = nil, location: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.distribution = distribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case distribution = "Distribution"
        }
    }

    public struct CreateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "Distribution", required: false, type: .structure)
        ]
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5.
        public let location: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, location: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.distribution = distribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case distribution = "Distribution"
        }
    }

    public struct DeleteServiceLinkedRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleName", location: .uri(locationName: "RoleName"), required: true, type: .string)
        ]
        public let roleName: String

        public init(roleName: String) {
            self.roleName = roleName
        }

        private enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
        }
    }

    public struct ListDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionList", required: false, type: .structure)
        ]
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        private enum CodingKeys: String, CodingKey {
            case distributionList = "DistributionList"
        }
    }

    public struct DistributionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The value you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// A flag that indicates whether more distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your distributions where they left off. 
        public let nextMarker: String?
        /// The value you provided for the Marker request parameter.
        public let marker: String
        /// A complex type that contains one DistributionSummary element for each distribution that was created by the current AWS account.
        public let items: DistributionSummaryList?
        /// The number of distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: DistributionSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case isTruncated = "IsTruncated"
            case nextMarker = "NextMarker"
            case marker = "Marker"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct TagKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure)
        ]
        ///  A complex type that contains Tag key elements.
        public let items: TagKeyList?

        public init(items: TagKeyList? = nil) {
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case viewerRequest = "viewer-request"
        case viewerResponse = "viewer-response"
        case originRequest = "origin-request"
        case originResponse = "origin-response"
        public var description: String { return self.rawValue }
    }

    public struct LoggingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "IncludeCookies", required: true, type: .boolean)
        ]
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// An optional string that you want CloudFront to prefix to the access log filenames for this distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a distribution or if you want to disable logging for an existing distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket, prefix, and IncludeCookies, the values are automatically deleted.
        public let enabled: Bool
        /// Specifies whether you want CloudFront to include cookies in access logs, specify true for IncludeCookies. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify false for IncludeCookies.
        public let includeCookies: Bool

        public init(bucket: String, prefix: String, enabled: Bool, includeCookies: Bool) {
            self.bucket = bucket
            self.prefix = prefix
            self.enabled = enabled
            self.includeCookies = includeCookies
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case prefix = "Prefix"
            case enabled = "Enabled"
            case includeCookies = "IncludeCookies"
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page).
        public let marker: String?
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure)
        ]
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(tags: Tags) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct HeaderList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .list)
        ]
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListDistributionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last distribution on that page).
        public let marker: String?
        /// The maximum number of distributions you want in the response body.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct DistributionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpVersion", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRootObject", required: false, type: .string), 
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "CustomErrorResponses", required: false, type: .structure), 
            AWSShapeMember(label: "Origins", required: true, type: .structure), 
            AWSShapeMember(label: "WebACLId", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "IsIPV6Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PriceClass", required: false, type: .enum), 
            AWSShapeMember(label: "ViewerCertificate", required: false, type: .structure), 
            AWSShapeMember(label: "Restrictions", required: false, type: .structure), 
            AWSShapeMember(label: "Aliases", required: false, type: .structure), 
            AWSShapeMember(label: "Logging", required: false, type: .structure), 
            AWSShapeMember(label: "CacheBehaviors", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultCacheBehavior", required: true, type: .structure)
        ]
        /// (Optional) Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP version. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support Server Name Identification (SNI). In general, configuring CloudFront to communicate with viewers using HTTP/2 reduces latency. You can improve performance by optimizing for HTTP/2. For more information, do an Internet search for "http/2 optimization." 
        public let httpVersion: HttpVersion?
        /// The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). Specifying a default root object avoids exposing the contents of your distribution. Specify only the object name, for example, index.html. Don't add a / before the object name. If you don't want to specify a default root object when you create a distribution, include an empty DefaultRootObject element. To delete the default root object from an existing distribution, update the distribution configuration and include an empty DefaultRootObject element. To replace the default root object, update the distribution configuration and specify the new object. For more information about the default root object, see Creating a Default Root Object in the Amazon CloudFront Developer Guide.
        public let defaultRootObject: String?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the DistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value you already sent in a previous request to create a distribution, and if the content of the DistributionConfig is identical to the original request (ignoring white space), CloudFront returns the same the response that it returned to the original request. If CallerReference is a value you already sent in a previous request to create a distribution but the content of the DistributionConfig is different from the original request, CloudFront returns a DistributionAlreadyExists error.
        public let callerReference: String
        /// A complex type that controls the following:   Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.   How long CloudFront caches HTTP status codes in the 4xx and 5xx range.   For more information about custom error pages, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let customErrorResponses: CustomErrorResponses?
        /// A complex type that contains information about origins for this distribution. 
        public let origins: Origins
        /// A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about AWS WAF, see the AWS WAF Developer Guide. 
        public let webACLId: String?
        /// Any comments you want to include about the distribution. If you don't want to specify a comment, include an empty Comment element. To delete an existing comment, update the distribution configuration and include an empty Comment element. To add or change a comment, update the distribution configuration and specify the new comment.
        public let comment: String
        /// From this field, you can enable or disable the selected distribution. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted.
        public let enabled: Bool
        /// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify true. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution.  In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the IpAddress parameter to restrict the IP addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see Creating a Signed URL Using a Custom Policy in the Amazon CloudFront Developer Guide. If you're using an Amazon Route 53 alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:   You enable IPv6 for the distribution   You're using alternate domain names in the URLs for your objects   For more information, see Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name in the Amazon Route 53 Developer Guide. If you created a CNAME resource record set, either with Amazon Route 53 or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.
        public let isIPV6Enabled: Bool?
        /// The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance. For more information about price classes, see Choosing the Price Class for a CloudFront Distribution in the Amazon CloudFront Developer Guide. For information about CloudFront pricing, including how price classes map to CloudFront regions, see Amazon CloudFront Pricing.
        public let priceClass: PriceClass?
        public let viewerCertificate: ViewerCertificate?
        public let restrictions: Restrictions?
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases?
        /// A complex type that controls whether access logs are written for the distribution. For more information about logging, see Access Logs in the Amazon CloudFront Developer Guide.
        public let logging: LoggingConfig?
        /// A complex type that contains zero or more CacheBehavior elements. 
        public let cacheBehaviors: CacheBehaviors?
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior

        public init(httpVersion: HttpVersion? = nil, defaultRootObject: String? = nil, callerReference: String, customErrorResponses: CustomErrorResponses? = nil, origins: Origins, webACLId: String? = nil, comment: String, enabled: Bool, isIPV6Enabled: Bool? = nil, priceClass: PriceClass? = nil, viewerCertificate: ViewerCertificate? = nil, restrictions: Restrictions? = nil, aliases: Aliases? = nil, logging: LoggingConfig? = nil, cacheBehaviors: CacheBehaviors? = nil, defaultCacheBehavior: DefaultCacheBehavior) {
            self.httpVersion = httpVersion
            self.defaultRootObject = defaultRootObject
            self.callerReference = callerReference
            self.customErrorResponses = customErrorResponses
            self.origins = origins
            self.webACLId = webACLId
            self.comment = comment
            self.enabled = enabled
            self.isIPV6Enabled = isIPV6Enabled
            self.priceClass = priceClass
            self.viewerCertificate = viewerCertificate
            self.restrictions = restrictions
            self.aliases = aliases
            self.logging = logging
            self.cacheBehaviors = cacheBehaviors
            self.defaultCacheBehavior = defaultCacheBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case httpVersion = "HttpVersion"
            case defaultRootObject = "DefaultRootObject"
            case callerReference = "CallerReference"
            case customErrorResponses = "CustomErrorResponses"
            case origins = "Origins"
            case webACLId = "WebACLId"
            case comment = "Comment"
            case enabled = "Enabled"
            case isIPV6Enabled = "IsIPV6Enabled"
            case priceClass = "PriceClass"
            case viewerCertificate = "ViewerCertificate"
            case restrictions = "Restrictions"
            case aliases = "Aliases"
            case logging = "Logging"
            case cacheBehaviors = "CacheBehaviors"
            case defaultCacheBehavior = "DefaultCacheBehavior"
        }
    }

    public struct Restrictions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GeoRestriction", required: true, type: .structure)
        ]
        public let geoRestriction: GeoRestriction

        public init(geoRestriction: GeoRestriction) {
            self.geoRestriction = geoRestriction
        }

        private enum CodingKeys: String, CodingKey {
            case geoRestriction = "GeoRestriction"
        }
    }

    public struct ViewerCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSLSupportMethod", required: false, type: .enum), 
            AWSShapeMember(label: "IAMCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "MinimumProtocolVersion", required: false, type: .enum), 
            AWSShapeMember(label: "ACMCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontDefaultCertificate", required: false, type: .boolean), 
            AWSShapeMember(label: "CertificateSource", required: false, type: .enum)
        ]
        /// If you specify a value for ViewerCertificate$ACMCertificateArn or for ViewerCertificate$IAMCertificateId, you must also specify how you want CloudFront to serve HTTPS requests: using a method that works for all clients or one that works for most clients:    vip: CloudFront uses dedicated IP addresses for your content and can respond to HTTPS requests from any viewer. However, you will incur additional monthly charges.    sni-only: CloudFront can respond to HTTPS requests from viewers that support Server Name Indication (SNI). All modern browsers support SNI, but some browsers still in use don't support SNI. If some of your users' browsers don't support SNI, we recommend that you do one of the following:   Use the vip option (dedicated IP addresses) instead of sni-only.   Use the CloudFront SSL/TLS certificate instead of a custom certificate. This requires that you use the CloudFront domain name of your distribution in the URLs for your objects, for example, https://d111111abcdef8.cloudfront.net/logo.png.   If you can control which browser your users use, upgrade the browser to one that supports SNI.   Use HTTP instead of HTTPS.     Don't specify a value for SSLSupportMethod if you specified &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;. For more information, see Using Alternate Domain Names and HTTPS in the Amazon CloudFront Developer Guide.
        public let sSLSupportMethod: SSLSupportMethod?
        /// For information about how and when to use IAMCertificateId, see ViewerCertificate.
        public let iAMCertificateId: String?
        /// Specify the security policy that you want CloudFront to use for HTTPS connections. A security policy determines two settings:   The minimum SSL/TLS protocol that CloudFront uses to communicate with viewers   The cipher that CloudFront uses to encrypt the content that it returns to viewers    On the CloudFront console, this setting is called Security policy.  We recommend that you specify TLSv1.1_2016 unless your users are using browsers or devices that do not support TLSv1.1 or later. When both of the following are true, you must specify TLSv1 or later for the security policy:    You're using a custom certificate: you specified a value for ACMCertificateArn or for IAMCertificateId    You're using SNI: you specified sni-only for SSLSupportMethod    If you specify true for CloudFrontDefaultCertificate, CloudFront automatically sets the security policy to TLSv1 regardless of the value that you specify for MinimumProtocolVersion. For information about the relationship between the security policy that you choose and the protocols and ciphers that CloudFront uses to communicate with viewers, see  Supported SSL/TLS Protocols and Ciphers for Communication Between Viewers and CloudFront in the Amazon CloudFront Developer Guide.
        public let minimumProtocolVersion: MinimumProtocolVersion?
        /// For information about how and when to use ACMCertificateArn, see ViewerCertificate.
        public let aCMCertificateArn: String?
        /// This field has been deprecated. Use one of the following fields instead:    ViewerCertificate$ACMCertificateArn     ViewerCertificate$IAMCertificateId     ViewerCertificate$CloudFrontDefaultCertificate   
        public let certificate: String?
        /// For information about how and when to use CloudFrontDefaultCertificate, see ViewerCertificate.
        public let cloudFrontDefaultCertificate: Bool?
        /// This field has been deprecated. Use one of the following fields instead:    ViewerCertificate$ACMCertificateArn     ViewerCertificate$IAMCertificateId     ViewerCertificate$CloudFrontDefaultCertificate   
        public let certificateSource: CertificateSource?

        public init(sSLSupportMethod: SSLSupportMethod? = nil, iAMCertificateId: String? = nil, minimumProtocolVersion: MinimumProtocolVersion? = nil, aCMCertificateArn: String? = nil, certificate: String? = nil, cloudFrontDefaultCertificate: Bool? = nil, certificateSource: CertificateSource? = nil) {
            self.sSLSupportMethod = sSLSupportMethod
            self.iAMCertificateId = iAMCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.aCMCertificateArn = aCMCertificateArn
            self.certificate = certificate
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.certificateSource = certificateSource
        }

        private enum CodingKeys: String, CodingKey {
            case sSLSupportMethod = "SSLSupportMethod"
            case iAMCertificateId = "IAMCertificateId"
            case minimumProtocolVersion = "MinimumProtocolVersion"
            case aCMCertificateArn = "ACMCertificateArn"
            case certificate = "Certificate"
            case cloudFrontDefaultCertificate = "CloudFrontDefaultCertificate"
            case certificateSource = "CertificateSource"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "TagKeys"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .body(locationName: "TagKeys"), required: true, type: .structure)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag key elements.
        public let tagKeys: TagKeys

        public init(resource: String, tagKeys: TagKeys) {
            self.resource = resource
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case tagKeys = "TagKeys"
        }
    }

    public struct GetStreamingDistributionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct StreamingDistribution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ActiveTrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The date and time that the distribution was last modified. 
        public let lastModifiedTime: TimeStamp?
        /// The current status of the RTMP distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// The current configuration information for the RTMP distribution.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// A complex type that lists the AWS accounts, if any, that you included in the TrustedSigners complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content. The Signer complex type lists the AWS account number of the trusted signer or self if the signer is the AWS account that created the distribution. The Signer element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create signed URLs. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let activeTrustedSigners: ActiveTrustedSigners
        public let arn: String
        /// The domain name that corresponds to the streaming distribution, for example, s5c39gqb8ow64r.cloudfront.net. 
        public let domainName: String
        /// The identifier for the RTMP distribution. For example: EGTXBD79EXAMPLE.
        public let id: String

        public init(lastModifiedTime: TimeStamp? = nil, status: String, streamingDistributionConfig: StreamingDistributionConfig, activeTrustedSigners: ActiveTrustedSigners, arn: String, domainName: String, id: String) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.streamingDistributionConfig = streamingDistributionConfig
            self.activeTrustedSigners = activeTrustedSigners
            self.arn = arn
            self.domainName = domainName
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case streamingDistributionConfig = "StreamingDistributionConfig"
            case activeTrustedSigners = "ActiveTrustedSigners"
            case arn = "ARN"
            case domainName = "DomainName"
            case id = "Id"
        }
    }

    public struct CustomHeaders: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  Optional: A list that contains one OriginCustomHeader element for each custom header that you want CloudFront to forward to the origin. If Quantity is 0, omit Items.
        public let items: OriginCustomHeadersList?
        /// The number of custom headers, if any, for this distribution.
        public let quantity: Int32

        public init(items: OriginCustomHeadersList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CachedMethods: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains the HTTP methods that you want CloudFront to cache responses to.
        public let items: MethodsList
        /// The number of HTTP methods for which you want CloudFront to cache responses. Valid values are 2 (for caching responses to GET and HEAD requests) and 3 (for caching responses to GET, HEAD, and OPTIONS requests).
        public let quantity: Int32

        public init(items: MethodsList, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct DistributionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpVersion", required: true, type: .enum), 
            AWSShapeMember(label: "CustomErrorResponses", required: true, type: .structure), 
            AWSShapeMember(label: "Origins", required: true, type: .structure), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "WebACLId", required: true, type: .string), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "IsIPV6Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Restrictions", required: true, type: .structure), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ViewerCertificate", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "Aliases", required: true, type: .structure), 
            AWSShapeMember(label: "PriceClass", required: true, type: .enum), 
            AWSShapeMember(label: "CacheBehaviors", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "DefaultCacheBehavior", required: true, type: .structure)
        ]
        ///  Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 will automatically use an earlier version.
        public let httpVersion: HttpVersion
        /// A complex type that contains zero or more CustomErrorResponses elements.
        public let customErrorResponses: CustomErrorResponses
        /// A complex type that contains information about origins for this distribution.
        public let origins: Origins
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// Whether the distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// The Web ACL Id (if any) associated with the distribution.
        public let webACLId: String
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.
        public let isIPV6Enabled: Bool
        public let restrictions: Restrictions
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: TimeStamp
        public let viewerCertificate: ViewerCertificate
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        public let id: String
        /// The current status of the distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases
        public let priceClass: PriceClass
        /// A complex type that contains zero or more CacheBehavior elements.
        public let cacheBehaviors: CacheBehaviors
        /// The domain name that corresponds to the distribution, for example, d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior

        public init(httpVersion: HttpVersion, customErrorResponses: CustomErrorResponses, origins: Origins, comment: String, enabled: Bool, webACLId: String, arn: String, isIPV6Enabled: Bool, restrictions: Restrictions, lastModifiedTime: TimeStamp, viewerCertificate: ViewerCertificate, id: String, status: String, aliases: Aliases, priceClass: PriceClass, cacheBehaviors: CacheBehaviors, domainName: String, defaultCacheBehavior: DefaultCacheBehavior) {
            self.httpVersion = httpVersion
            self.customErrorResponses = customErrorResponses
            self.origins = origins
            self.comment = comment
            self.enabled = enabled
            self.webACLId = webACLId
            self.arn = arn
            self.isIPV6Enabled = isIPV6Enabled
            self.restrictions = restrictions
            self.lastModifiedTime = lastModifiedTime
            self.viewerCertificate = viewerCertificate
            self.id = id
            self.status = status
            self.aliases = aliases
            self.priceClass = priceClass
            self.cacheBehaviors = cacheBehaviors
            self.domainName = domainName
            self.defaultCacheBehavior = defaultCacheBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case httpVersion = "HttpVersion"
            case customErrorResponses = "CustomErrorResponses"
            case origins = "Origins"
            case comment = "Comment"
            case enabled = "Enabled"
            case webACLId = "WebACLId"
            case arn = "ARN"
            case isIPV6Enabled = "IsIPV6Enabled"
            case restrictions = "Restrictions"
            case lastModifiedTime = "LastModifiedTime"
            case viewerCertificate = "ViewerCertificate"
            case id = "Id"
            case status = "Status"
            case aliases = "Aliases"
            case priceClass = "PriceClass"
            case cacheBehaviors = "CacheBehaviors"
            case domainName = "DomainName"
            case defaultCacheBehavior = "DefaultCacheBehavior"
        }
    }

    public struct CustomOriginConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginProtocolPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "HTTPPort", required: true, type: .integer), 
            AWSShapeMember(label: "OriginKeepaliveTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "OriginReadTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "HTTPSPort", required: true, type: .integer), 
            AWSShapeMember(label: "OriginSslProtocols", required: false, type: .structure)
        ]
        /// The origin protocol policy to apply to your origin.
        public let originProtocolPolicy: OriginProtocolPolicy
        /// The HTTP port the custom origin listens on.
        public let hTTPPort: Int32
        /// You can create a custom keep-alive timeout. All timeout units are in seconds. The default keep-alive timeout is 5 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 1 second; the maximum is 60 seconds. If you need to increase the maximum time limit, contact the AWS Support Center.
        public let originKeepaliveTimeout: Int32?
        /// You can create a custom origin read timeout. All timeout units are in seconds. The default origin read timeout is 30 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 4 seconds; the maximum is 60 seconds. If you need to increase the maximum time limit, contact the AWS Support Center.
        public let originReadTimeout: Int32?
        /// The HTTPS port the custom origin listens on.
        public let hTTPSPort: Int32
        /// The SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS.
        public let originSslProtocols: OriginSslProtocols?

        public init(originProtocolPolicy: OriginProtocolPolicy, hTTPPort: Int32, originKeepaliveTimeout: Int32? = nil, originReadTimeout: Int32? = nil, hTTPSPort: Int32, originSslProtocols: OriginSslProtocols? = nil) {
            self.originProtocolPolicy = originProtocolPolicy
            self.hTTPPort = hTTPPort
            self.originKeepaliveTimeout = originKeepaliveTimeout
            self.originReadTimeout = originReadTimeout
            self.hTTPSPort = hTTPSPort
            self.originSslProtocols = originSslProtocols
        }

        private enum CodingKeys: String, CodingKey {
            case originProtocolPolicy = "OriginProtocolPolicy"
            case hTTPPort = "HTTPPort"
            case originKeepaliveTimeout = "OriginKeepaliveTimeout"
            case originReadTimeout = "OriginReadTimeout"
            case hTTPSPort = "HTTPSPort"
            case originSslProtocols = "OriginSslProtocols"
        }
    }

    public struct CreateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the streaming distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct KeyPairIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPairId", required: false, type: .list)
        ]
        public let keyPairId: [String]?

        public init(keyPairId: [String]? = nil) {
            self.keyPairId = keyPairId
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairId = "KeyPairId"
        }
    }

    public struct CustomErrorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResponseCode", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCachingMinTTL", required: false, type: .long), 
            AWSShapeMember(label: "ErrorCode", required: true, type: .integer), 
            AWSShapeMember(label: "ResponsePagePath", required: false, type: .string)
        ]
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:   Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute 200, the response typically won't be intercepted.   If you don't care about distinguishing among different client errors or server errors, you can specify 400 or 500 as the ResponseCode for all 4xx or 5xx errors.   You might want to return a 200 status code (OK) and static website so your customers don't know that your website is down.   If you specify a value for ResponseCode, you must also specify a value for ResponsePagePath. If you don't want to specify a value, include an empty element, &lt;ResponseCode&gt;, in the XML document.
        public let responseCode: String?
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. If you don't want to specify a value, include an empty element, &lt;ErrorCachingMinTTL&gt;, in the XML document. For more information, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let errorCachingMinTTL: Int64?
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        public let errorCode: Int32
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:   The value of PathPattern matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named /4xx-errors. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, /4xx-errors/*.    The value of TargetOriginId specifies the value of the ID element for the origin that contains your custom error pages.   If you specify a value for ResponsePagePath, you must also specify a value for ResponseCode. If you don't want to specify a value, include an empty element, &lt;ResponsePagePath&gt;, in the XML document. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.
        public let responsePagePath: String?

        public init(responseCode: String? = nil, errorCachingMinTTL: Int64? = nil, errorCode: Int32, responsePagePath: String? = nil) {
            self.responseCode = responseCode
            self.errorCachingMinTTL = errorCachingMinTTL
            self.errorCode = errorCode
            self.responsePagePath = responsePagePath
        }

        private enum CodingKeys: String, CodingKey {
            case responseCode = "ResponseCode"
            case errorCachingMinTTL = "ErrorCachingMinTTL"
            case errorCode = "ErrorCode"
            case responsePagePath = "ResponsePagePath"
        }
    }

    public enum HttpVersion: String, CustomStringConvertible, Codable {
        case http11 = "http1.1"
        case http2 = "http2"
        public var description: String { return self.rawValue }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's configuration information. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
        }
    }

    public struct CloudFrontOriginAccessIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3CanonicalUserId", required: true, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3. 
        public let s3CanonicalUserId: String
        /// The current configuration information for the identity. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?
        /// The ID for the origin access identity, for example, E74FTE3AJFJ256A. 
        public let id: String

        public init(s3CanonicalUserId: String, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil, id: String) {
            self.s3CanonicalUserId = s3CanonicalUserId
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case s3CanonicalUserId = "S3CanonicalUserId"
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case id = "Id"
        }
    }

    public struct TagList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct GetDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public enum SslProtocol: String, CustomStringConvertible, Codable {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        case tlsv11 = "TLSv1.1"
        case tlsv12 = "TLSv1.2"
        public var description: String { return self.rawValue }
    }

    public struct StreamingLoggingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted. 
        public let enabled: Bool
        /// An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case enabled = "Enabled"
            case prefix = "Prefix"
        }
    }

    public enum OriginProtocolPolicy: String, CustomStringConvertible, Codable {
        case httpOnly = "http-only"
        case matchViewer = "match-viewer"
        case httpsOnly = "https-only"
        public var description: String { return self.rawValue }
    }

    public struct GeoRestriction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "RestrictionType", required: true, type: .enum), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  A complex type that contains a Location element for each country in which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). The Location element is a two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist. Include one Location element for each country. CloudFront and MaxMind both use ISO 3166 country codes. For the current list of countries and the corresponding codes, see ISO 3166-1-alpha-2 code on the International Organization for Standardization website. You can also refer to the country list on the CloudFront console, which includes both country names and codes.
        public let items: LocationList?
        /// The method that you want to use to restrict distribution of your content by country:    none: No geo restriction is enabled, meaning access to content is not restricted by client geo location.    blacklist: The Location elements specify the countries in which you don't want CloudFront to distribute your content.    whitelist: The Location elements specify the countries in which you want CloudFront to distribute your content.  
        public let restrictionType: GeoRestrictionType
        /// When geo restriction is enabled, this is the number of countries in your whitelist or blacklist. Otherwise, when it is not enabled, Quantity is 0, and you can omit Items.
        public let quantity: Int32

        public init(items: LocationList? = nil, restrictionType: GeoRestrictionType, quantity: Int32) {
            self.items = items
            self.restrictionType = restrictionType
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case restrictionType = "RestrictionType"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistributionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The value you provided for the MaxItems request parameter. 
        public let maxItems: Int32
        /// A flag that indicates whether more streaming distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list. 
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your RTMP distributions where they left off. 
        public let nextMarker: String?
        /// The value you provided for the Marker request parameter. 
        public let marker: String
        /// A complex type that contains one StreamingDistributionSummary element for each distribution that was created by the current AWS account.
        public let items: StreamingDistributionSummaryList?
        /// The number of streaming distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: StreamingDistributionSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case isTruncated = "IsTruncated"
            case nextMarker = "NextMarker"
            case marker = "Marker"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct S3Origin: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginAccessIdentity", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The CloudFront origin access identity to associate with the RTMP distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content in the Amazon Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String
        /// The DNS name of the Amazon S3 origin. 
        public let domainName: String

        public init(originAccessIdentity: String, domainName: String) {
            self.originAccessIdentity = originAccessIdentity
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case originAccessIdentity = "OriginAccessIdentity"
            case domainName = "DomainName"
        }
    }

    public struct AliasList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CNAME", required: false, type: .list)
        ]
        public let cname: [String]?

        public init(cname: [String]? = nil) {
            self.cname = cname
        }

        private enum CodingKeys: String, CodingKey {
            case cname = "CNAME"
        }
    }

    public struct ListInvalidationsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InvalidationList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidationList", required: false, type: .structure)
        ]
        /// Information about invalidation batches. 
        public let invalidationList: InvalidationList?

        public init(invalidationList: InvalidationList? = nil) {
            self.invalidationList = invalidationList
        }

        private enum CodingKeys: String, CodingKey {
            case invalidationList = "InvalidationList"
        }
    }

    public struct CustomErrorResponseList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomErrorResponse", required: false, type: .list)
        ]
        public let customErrorResponse: [CustomErrorResponse]?

        public init(customErrorResponse: [CustomErrorResponse]? = nil) {
            self.customErrorResponse = customErrorResponse
        }

        private enum CodingKeys: String, CodingKey {
            case customErrorResponse = "CustomErrorResponse"
        }
    }

    public struct DistributionSummaryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionSummary", required: false, type: .list)
        ]
        public let distributionSummary: [DistributionSummary]?

        public init(distributionSummary: [DistributionSummary]? = nil) {
            self.distributionSummary = distributionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case distributionSummary = "DistributionSummary"
        }
    }

    public struct OriginCustomHeadersList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginCustomHeader", required: false, type: .list)
        ]
        public let originCustomHeader: [OriginCustomHeader]?

        public init(originCustomHeader: [OriginCustomHeader]? = nil) {
            self.originCustomHeader = originCustomHeader
        }

        private enum CodingKeys: String, CodingKey {
            case originCustomHeader = "OriginCustomHeader"
        }
    }

    public enum SSLSupportMethod: String, CustomStringConvertible, Codable {
        case sniOnly = "sni-only"
        case vip = "vip"
        public var description: String { return self.rawValue }
    }

    public struct CloudFrontOriginAccessIdentitySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "S3CanonicalUserId", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string)
        ]
        /// The ID for the origin access identity. For example: E74FTE3AJFJ256A.
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.
        public let s3CanonicalUserId: String
        /// The comment for this origin access identity, as originally specified when created.
        public let comment: String

        public init(id: String, s3CanonicalUserId: String, comment: String) {
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case s3CanonicalUserId = "S3CanonicalUserId"
            case comment = "Comment"
        }
    }

    public struct InvalidationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "CreateTime", required: true, type: .timestamp)
        ]
        /// The unique ID for an invalidation request.
        public let id: String
        /// The status of an invalidation request.
        public let status: String
        public let createTime: TimeStamp

        public init(id: String, status: String, createTime: TimeStamp) {
            self.id = id
            self.status = status
            self.createTime = createTime
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case status = "Status"
            case createTime = "CreateTime"
        }
    }

    public struct ActiveTrustedSigners: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains one Signer complex type for each trusted signer that is specified in the TrustedSigners complex type. For more information, see ActiveTrustedSigners. 
        public let items: SignerList?
        /// Enabled is true if any of the AWS accounts listed in the TrustedSigners complex type for this RTMP distribution have active CloudFront key pairs. If not, Enabled is false. For more information, see ActiveTrustedSigners.
        public let enabled: Bool
        /// A complex type that contains one Signer complex type for each trusted signer specified in the TrustedSigners complex type. For more information, see ActiveTrustedSigners.
        public let quantity: Int32

        public init(items: SignerList? = nil, enabled: Bool, quantity: Int32) {
            self.items = items
            self.enabled = enabled
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case enabled = "Enabled"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistributionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .structure), 
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Logging", required: false, type: .structure), 
            AWSShapeMember(label: "S3Origin", required: true, type: .structure), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "PriceClass", required: false, type: .enum)
        ]
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution. 
        public let aliases: Aliases?
        /// A unique number that ensures that the request can't be replayed. If the CallerReference is new (no matter the content of the StreamingDistributionConfig object), a new streaming distribution is created. If the CallerReference is a value that you already sent in a previous request to create a streaming distribution, and the content of the StreamingDistributionConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request. If the CallerReference is a value that you already sent in a previous request to create a streaming distribution but the content of the StreamingDistributionConfig is different from the original request, CloudFront returns a DistributionAlreadyExists error. 
        public let callerReference: String
        /// A complex type that controls whether access logs are written for the streaming distribution. 
        public let logging: StreamingLoggingConfig?
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution. 
        public let s3Origin: S3Origin
        /// Whether the streaming distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// Any comments you want to include about the streaming distribution. 
        public let comment: String
        /// A complex type that specifies any AWS accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let trustedSigners: TrustedSigners
        /// A complex type that contains information about price class for this streaming distribution. 
        public let priceClass: PriceClass?

        public init(aliases: Aliases? = nil, callerReference: String, logging: StreamingLoggingConfig? = nil, s3Origin: S3Origin, enabled: Bool, comment: String, trustedSigners: TrustedSigners, priceClass: PriceClass? = nil) {
            self.aliases = aliases
            self.callerReference = callerReference
            self.logging = logging
            self.s3Origin = s3Origin
            self.enabled = enabled
            self.comment = comment
            self.trustedSigners = trustedSigners
            self.priceClass = priceClass
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case callerReference = "CallerReference"
            case logging = "Logging"
            case s3Origin = "S3Origin"
            case enabled = "Enabled"
            case comment = "Comment"
            case trustedSigners = "TrustedSigners"
            case priceClass = "PriceClass"
        }
    }

    public struct MethodsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Method", required: false, type: .list)
        ]
        public let method: [Method]?

        public init(method: [Method]? = nil) {
            self.method = method
        }

        private enum CodingKeys: String, CodingKey {
            case method = "Method"
        }
    }

    public struct DeleteCloudFrontOriginAccessIdentityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The value of the ETag header you received from a previous GET or PUT request. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The origin access identity's ID.
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case ifMatch = "If-Match"
            case id = "Id"
        }
    }

    public struct CreateInvalidationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InvalidationBatch"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidationBatch", location: .body(locationName: "InvalidationBatch"), required: true, type: .structure), 
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string)
        ]
        /// The batch information for the invalidation.
        public let invalidationBatch: InvalidationBatch
        /// The distribution's id.
        public let distributionId: String

        public init(invalidationBatch: InvalidationBatch, distributionId: String) {
            self.invalidationBatch = invalidationBatch
            self.distributionId = distributionId
        }

        private enum CodingKeys: String, CodingKey {
            case invalidationBatch = "InvalidationBatch"
            case distributionId = "DistributionId"
        }
    }

    public struct TagKeyList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .list)
        ]
        public let key: [String]?

        public init(key: [String]? = nil) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct OriginList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Origin", required: false, type: .list)
        ]
        public let origin: [Origin]?

        public init(origin: [Origin]? = nil) {
            self.origin = origin
        }

        private enum CodingKeys: String, CodingKey {
            case origin = "Origin"
        }
    }

    public struct GetDistributionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct UpdateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Distribution", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.distribution = distribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case distribution = "Distribution"
        }
    }

    public enum PriceClass: String, CustomStringConvertible, Codable {
        case priceclass100 = "PriceClass_100"
        case priceclass200 = "PriceClass_200"
        case priceclassAll = "PriceClass_All"
        public var description: String { return self.rawValue }
    }

    public struct GetStreamingDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL. 
        public let eTag: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig?

        public init(eTag: String? = nil, streamingDistributionConfig: StreamingDistributionConfig? = nil) {
            self.eTag = eTag
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct KeyPairIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let items: KeyPairIdList?
        /// The number of active CloudFront key pairs for AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let quantity: Int32

        public init(items: KeyPairIdList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct Origin: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomHeaders", required: false, type: .structure), 
            AWSShapeMember(label: "CustomOriginConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "OriginPath", required: false, type: .string), 
            AWSShapeMember(label: "S3OriginConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// A complex type that contains names and values for the custom headers that you want.
        public let customHeaders: CustomHeaders?
        /// A complex type that contains information about a custom origin. If the origin is an Amazon S3 bucket, use the S3OriginConfig element instead.
        public let customOriginConfig: CustomOriginConfig?
        ///  Amazon S3 origins: The DNS name of the Amazon S3 bucket from which you want CloudFront to get objects for this origin, for example, myawsbucket.s3.amazonaws.com. Constraints for Amazon S3 origins:    If you configured Amazon S3 Transfer Acceleration for your bucket, don't specify the s3-accelerate endpoint for DomainName.   The bucket name must be between 3 and 63 characters long (inclusive).   The bucket name must contain only lowercase characters, numbers, periods, underscores, and dashes.   The bucket name must not contain adjacent periods.    Custom Origins: The DNS domain name for the HTTP server from which you want CloudFront to get objects for this origin, for example, www.example.com.  Constraints for custom origins:    DomainName must be a valid DNS name that contains only a-z, A-Z, 0-9, dot (.), hyphen (-), or underscore (_) characters.   The name cannot exceed 128 characters.  
        public let domainName: String
        /// An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin. When you include the OriginPath element, specify the directory name, beginning with a /. CloudFront appends the directory name to the value of DomainName, for example, example.com/production. Do not include a / at the end of the directory name. For example, suppose you've specified the following values for your distribution:    DomainName: An Amazon S3 bucket named myawsbucket.    OriginPath: /production     CNAME: example.com    When a user enters example.com/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/index.html. When a user enters example.com/acme/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/acme/index.html.
        public let originPath: String?
        /// A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin, use the CustomOriginConfig element instead.
        public let s3OriginConfig: S3OriginConfig?
        /// A unique identifier for the origin. The value of Id must be unique within the distribution. When you specify the value of TargetOriginId for the default cache behavior or for another cache behavior, you indicate the origin to which you want the cache behavior to route requests by specifying the value of the Id element for that origin. When a request matches the path pattern for that cache behavior, CloudFront routes the request to the specified origin. For more information, see Cache Behavior Settings in the Amazon CloudFront Developer Guide.
        public let id: String

        public init(customHeaders: CustomHeaders? = nil, customOriginConfig: CustomOriginConfig? = nil, domainName: String, originPath: String? = nil, s3OriginConfig: S3OriginConfig? = nil, id: String) {
            self.customHeaders = customHeaders
            self.customOriginConfig = customOriginConfig
            self.domainName = domainName
            self.originPath = originPath
            self.s3OriginConfig = s3OriginConfig
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case customHeaders = "CustomHeaders"
            case customOriginConfig = "CustomOriginConfig"
            case domainName = "DomainName"
            case originPath = "OriginPath"
            case s3OriginConfig = "S3OriginConfig"
            case id = "Id"
        }
    }

    public struct Tags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure)
        ]
        ///  A complex type that contains Tag elements.
        public let items: TagList?

        public init(items: TagList? = nil) {
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public struct LambdaFunctionAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LambdaFunctionAssociation", required: false, type: .list)
        ]
        public let lambdaFunctionAssociation: [LambdaFunctionAssociation]?

        public init(lambdaFunctionAssociation: [LambdaFunctionAssociation]? = nil) {
            self.lambdaFunctionAssociation = lambdaFunctionAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionAssociation = "LambdaFunctionAssociation"
        }
    }

    public struct StreamingDistributionSummaryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionSummary", required: false, type: .list)
        ]
        public let streamingDistributionSummary: [StreamingDistributionSummary]?

        public init(streamingDistributionSummary: [StreamingDistributionSummary]? = nil) {
            self.streamingDistributionSummary = streamingDistributionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionSummary = "StreamingDistributionSummary"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure)
        ]
        /// The current version of the origin access identity's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
        }
    }

    public struct GetDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Distribution", required: false, type: .structure)
        ]
        /// The current version of the distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.distribution = distribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case distribution = "Distribution"
        }
    }

    public struct UpdateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", location: .body(locationName: "StreamingDistributionConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The value of the ETag header that you received when retrieving the streaming distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// The streaming distribution's id.
        public let id: String

        public init(ifMatch: String? = nil, streamingDistributionConfig: StreamingDistributionConfig, id: String) {
            self.ifMatch = ifMatch
            self.streamingDistributionConfig = streamingDistributionConfig
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case ifMatch = "If-Match"
            case streamingDistributionConfig = "StreamingDistributionConfig"
            case id = "Id"
        }
    }

    public struct CloudFrontOriginAccessIdentityList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: Int32
        /// A flag that indicates whether more origin access identities remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more items in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your origin access identities where they left off. 
        public let nextMarker: String?
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page). 
        public let marker: String
        /// A complex type that contains one CloudFrontOriginAccessIdentitySummary element for each origin access identity that was created by the current AWS account.
        public let items: CloudFrontOriginAccessIdentitySummaryList?
        /// The number of CloudFront origin access identities that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: CloudFrontOriginAccessIdentitySummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case isTruncated = "IsTruncated"
            case nextMarker = "NextMarker"
            case marker = "Marker"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The identity's ID. 
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct CreateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", location: .body(locationName: "CloudFrontOriginAccessIdentityConfig"), required: true, type: .structure)
        ]
        /// The current configuration information for the identity.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
        }
    }

    public struct Distribution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "ActiveTrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "DistributionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "InProgressInvalidationBatches", required: true, type: .integer), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The date and time the distribution was last modified. 
        public let lastModifiedTime: TimeStamp
        /// This response element indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated to all CloudFront edge locations. 
        public let status: String
        /// CloudFront automatically adds this element to the response only if you've set up the distribution to serve private content with signed URLs. The element lists the key pair IDs that CloudFront is aware of for each trusted signer. The Signer child element lists the AWS account number of the trusted signer (or an empty Self element if the signer is you). The Signer element also includes the IDs of any active key pairs associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create working signed URLs.
        public let activeTrustedSigners: ActiveTrustedSigners
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// The current configuration information for the distribution. Send a GET request to the /CloudFront API version/distribution ID/config resource.
        public let distributionConfig: DistributionConfig
        /// The domain name corresponding to the distribution, for example, d111111abcdef8.cloudfront.net. 
        public let domainName: String
        /// The number of invalidation batches currently in progress. 
        public let inProgressInvalidationBatches: Int32
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5. 
        public let id: String

        public init(lastModifiedTime: TimeStamp, status: String, activeTrustedSigners: ActiveTrustedSigners, arn: String, distributionConfig: DistributionConfig, domainName: String, inProgressInvalidationBatches: Int32, id: String) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.activeTrustedSigners = activeTrustedSigners
            self.arn = arn
            self.distributionConfig = distributionConfig
            self.domainName = domainName
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case activeTrustedSigners = "ActiveTrustedSigners"
            case arn = "ARN"
            case distributionConfig = "DistributionConfig"
            case domainName = "DomainName"
            case inProgressInvalidationBatches = "InProgressInvalidationBatches"
            case id = "Id"
        }
    }

    public struct StreamingDistributionConfigWithTags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "StreamingDistributionConfig", required: true, type: .structure)
        ]
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags
        /// A streaming distribution Configuration.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(tags: Tags, streamingDistributionConfig: StreamingDistributionConfig) {
            self.tags = tags
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct CloudFrontOriginAccessIdentityConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string)
        ]
        /// A unique number that ensures the request can't be replayed. If the CallerReference is new (no matter the content of the CloudFrontOriginAccessIdentityConfig object), a new origin access identity is created. If the CallerReference is a value already sent in a previous identity request, and the content of the CloudFrontOriginAccessIdentityConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request.  If the CallerReference is a value you already sent in a previous request to create an identity, but the content of the CloudFrontOriginAccessIdentityConfig is different from the original request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error. 
        public let callerReference: String
        /// Any comments you want to include about the origin access identity. 
        public let comment: String

        public init(callerReference: String, comment: String) {
            self.callerReference = callerReference
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
        }
    }

    public struct UpdateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
        }
    }

    public struct DeleteStreamingDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The value of the ETag header that you received when you disabled the streaming distribution. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The distribution ID. 
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case ifMatch = "If-Match"
            case id = "Id"
        }
    }

    public struct CustomErrorResponses: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains a CustomErrorResponse element for each HTTP status code for which you want to specify a custom error page and/or a caching duration. 
        public let items: CustomErrorResponseList?
        /// The number of HTTP status codes for which you want to specify a custom error page and/or a caching duration. If Quantity is 0, you can omit Items.
        public let quantity: Int32

        public init(items: CustomErrorResponseList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CookieNames: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains one Name element for each cookie that you want CloudFront to forward to the origin for this cache behavior.
        public let items: CookieNameList?
        /// The number of different cookies that you want CloudFront to forward to the origin for this cache behavior.
        public let quantity: Int32

        public init(items: CookieNameList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CookieNameList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .list)
        ]
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum Method: String, CustomStringConvertible, Codable {
        case get = "GET"
        case head = "HEAD"
        case post = "POST"
        case put = "PUT"
        case patch = "PATCH"
        case options = "OPTIONS"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct AwsAccountNumberList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsAccountNumber", required: false, type: .list)
        ]
        public let awsAccountNumber: [String]?

        public init(awsAccountNumber: [String]? = nil) {
            self.awsAccountNumber = awsAccountNumber
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountNumber = "AwsAccountNumber"
        }
    }

    public struct Aliases: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.
        public let items: AliasList?
        /// The number of CNAME aliases, if any, that you want to associate with this distribution.
        public let quantity: Int32

        public init(items: AliasList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct DeleteDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The value of the ETag header that you received when you disabled the distribution. For example: E2QWRUHAPOMQZL. 
        public let ifMatch: String?
        /// The distribution ID. 
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case ifMatch = "If-Match"
            case id = "Id"
        }
    }

}